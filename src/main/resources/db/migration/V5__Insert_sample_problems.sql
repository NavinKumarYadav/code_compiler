INSERT IGNORE INTO problems (title, description, difficulty, input, output, created_at) VALUES
('Two Sum',
 'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]',
 'EASY',
 '[2,7,11,15], 9',
 '[0,1]',
 NOW()),

('Reverse String',
 'Write a function that reverses a string. The input string is given as an array of characters.\n\nYou must do this by modifying the input array in-place with O(1) extra memory.\n\nExample:\nInput: ["h","e","l","l","o"]\nOutput: ["o","l","l","e","h"]',
 'EASY',
 'hello',
 'olleh',
 NOW()),

('Palindrome Check',
 'Given a string s, return true if it is a palindrome, otherwise return false.\n\nA palindrome is a string that reads the same forward and backward.\n\nExample:\nInput: "racecar"\nOutput: true',
 'EASY',
 'racecar',
 'true',
 NOW()),

('Fibonacci Number',
 'The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.\n\nGiven n, calculate F(n).\n\nExample:\nInput: 5\nOutput: 5',
 'EASY',
 '5',
 '5',
 NOW()),

('Valid Parentheses',
 'Given a string s containing just the characters ''('', '')'', ''{'', ''}'', ''['' and '']'', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.',
 'MEDIUM',
 '()[]{}',
 'true',
 NOW()),

('Binary Search',
 'Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\n\nYou must write an algorithm with O(log n) runtime complexity.',
 'EASY',
 '[-1,0,3,5,9,12], 9',
 '4',
 NOW()),

('Linked List Cycle',
 'Given head, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.',
 'EASY',
 '[3,2,0,-4], pos=1',
 'true',
 NOW());